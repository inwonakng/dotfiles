set encoding=utf-8
syntax on
set number relativenumber
set laststatus=2
set nobackup
set nowritebackup
filetype plugin indent on
set clipboard=unnamed
set hlsearch

" use catppuccin mocha
set termguicolors
colorscheme catppuccin_mocha

highlight Normal ctermbg=None
highlight LineNr ctermfg=DarkGrey

" plugins
call plug#begin()
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'jpalardy/vim-slime'
Plug 'tpope/vim-tbone'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-vinegar'
call plug#end()

" Turn off highlighting after search [https://stackoverflow.com/questions/4372660/get-rid-of-vims-highlight-after-searching-text]
nnoremap <esc> :noh<return><esc>

" Keep selection after indenting
vnoremap < <gv
vnoremap > >gv

" Movement between panes
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" fix tabs
set tabstop=4
set shiftwidth=4
set expandtab

" turn off wrap
set nowrap

" turn off case, this helps with command completion
set ignorecase

" set leader key
let mapleader = " "

" quit completely
nmap <leader>qq :qa<CR>

" window commands
nmap <leader>\ :vsp<CR>
nmap <leader>- :sp<CR>
nmap <leader>wd :q<CR>
nmap <leader>wo :only<CR>
" reset window sizes
nmap <leader>w= :wincmd =<CR>
nmap <leader>w< :5winc <<CR>
nmap <leader>w> :5winc ><CR>

" buffer commands
nmap <leader>bd :q<CR>

" tab commands
nmap <leader><Tab><Tab> :tabnew<CR>
nmap <leader><Tab>] :tabnext<CR>
nmap <leader><Tab>[ :tabprev<CR>
nmap <leader><Tab>s :tab sb<CR>

nmap <leader><Tab>d :tabclose<CR>
nmap <leader><Tab>o :tabonly<CR>

" fzf stuff
nmap <leader>ff :Files<CR>
nmap <leader>fb :Buffers<CR>
nmap <leader>sb :BLines<CR>
nmap <leader>sg :Rg<CR>

" set up vim-slime
let g:slime_no_mappings = 1
let g:slime_target = "tmux"
let g:slime_cell_delimiter = "# %%"
let g:slime_bracketed_paste = 1
let g:slime_python_ipython = 0
let g:slime_default_config = {
      \ "socket_name": "default",
      \ "target_pane": "%1"
      \ }
nmap <leader>rr <Plug>SlimeSendCell<CR>
nmap <leader>rc :SlimeConfig<CR>
vmap <leader>rr :<C-u>'<,'>SlimeSend<CR>
nmap [r /# %%<CR> 
nmap ]r k/# %%<CR>N 

" utility command for copying the path of current buffer file
function! YankFilePathFunc()
  let path = expand('%:p')
  if has("clipboard")
    let @+ = path
  else
    let @" = path
  endif
  echo path
endfunction
command! YankFilePath call YankFilePathFunc()

" For relative paths
function! YankRelativeFilePathFunc()
    let full_path = expand('%:p')
    let cwd = getcwd()
    let relative_path = fnamemodify(full_path, ':.' . cwd . ':~:.')
    if has("clipboard")
      let @+ = relative_path
    else
      let @" = relative_path
    endif
    echo relative_path
endfunction
command! YankRelativeFilePath call YankRelativeFilePathFunc()

nnoremap yP :YankFilePath<CR>
nnoremap yp :YankRelativeFilePath<CR>

" Search forward using visually selected text. Override the default behavior
xnoremap # "zy/\V<C-R>=escape(@z, '/\')<CR><CR>
xnoremap * "zy/\V<C-R>=escape(@z, '?')<CR><CR>

" FZF Ripgrep for visually selected text.
xnoremap <leader>sg "zy:Rg <C-R>=escape(@z, '')<CR><CR>
